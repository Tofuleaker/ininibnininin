local UILib = loadstring(game:HttpGet('https://raw.githubusercontent.com/inceldom/kinx/main/ui'))()

local win = UILib:Window("Newgen's Streamproof HUB",Color3.fromRGB(44, 120, 224), Enum.KeyCode.RightControl)

--------------------------------------------------------------------

local Aiming = loadstring(game:HttpGet("https://pastebin.com/raw/R4kzLKMe"))()
Aiming.TeamCheck(false)
    
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
    
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = Workspace.CurrentCamera
    
local DaHoodSettings = {
SilentAim = false,
Prediction = 0.1437,
}
getgenv().DaHoodSettings = DaHoodSettings
    
function Aiming.Check()
if not (Aiming.Enabled == true and Aiming.Selected ~= LocalPlayer and Aiming.SelectedPart ~= nil) then
return false
end
    
local Character = Aiming.Character(Aiming.Selected)
local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
    
if (KOd or Grabbed) then
return false
end
    
return true
end
    
local __index
__index = hookmetamethod(game, "__index", function(t, k)
if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and Aiming.Check()) then
local SelectedPart = Aiming.SelectedPart
    
if (DaHoodSettings.SilentAim and (k == "Hit" or k == "Target")) then
local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)
    
return (k == "Hit" and Hit or SelectedPart)
end
end
    
return __index(t, k)
end)

-----------------------------------------------------------------------------------------------------------------------------------

getgenv().Aimbot = { 
    Enabled = false,
    Smoothness = 0.0273,
    Smoothing = true,
    AirshotFunc = false,
    AirshotPart = "RightFoot",
    AimPart = "HumanoidRootPart",
    Predicting = 1.2,
    Key = Enum.KeyCode.Q,
    Toggled
}

----------------------------------------------------------------------------------------------------------------------------------
local CurrentCamera = game:GetService("Workspace").CurrentCamera
local RunService = game:GetService("RunService")
local Mouse = game.Players.LocalPlayer:GetMouse()
local LocalPlayer = game.Players.LocalPlayer
local Plr

function FindClosestPlayer()
    local ClosestDistance, ClosestPlayer = math.huge, nil
    for _, Player in next, game:GetService("Players"):GetPlayers() do
        local ISNTKNOCKED = Player.Character:WaitForChild("BodyEffects")["K.O"].Value ~= true
        local ISNTGRABBED = Player.Character:FindFirstChild("GRABBING_COINSTRAINT") == nil

        if Player ~= LocalPlayer then
            local Character = Player.Character
            if Character and Character.Humanoid.Health > 1 and ISNTKNOCKED and ISNTGRABBED then
                local Position, IsVisibleOnViewPort = CurrentCamera:WorldToViewportPoint(Character.HumanoidRootPart
                                                                                             .Position)
                if IsVisibleOnViewPort then
                    local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Position.X, Position.Y)).Magnitude
                    if Distance < ClosestDistance then
                        ClosestPlayer = Player
                        ClosestDistance = Distance
                    end
                end
            end
        end
    end
    return ClosestPlayer, ClosestDistance
end



    game:GetService("UserInputService").InputBegan:Connect(function(keygo)
           if (keygo.KeyCode == getgenv().Aimbot.Key) then
               Toggled = not Toggled
               if Toggled then
               Plr =  FindClosestPlayer()
end
         end
           
end)
game:GetService("RunService").RenderStepped:Connect(function()
if getgenv().Aimbot.Smoothing and getgenv().Aimbot.Enabled and Toggled == true then
    local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Plr.Character[getgenv().Aimbot.AimPart].Position + Plr.Character[getgenv().Aimbot.AimPart].Velocity*getgenv().Aimbot.Predicting/10)
                                 workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Aimbot.Smoothness, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                            elseif getgenv().Aimbot.Smoothing == false and getgenv().Aimbot.Enabled and Toggled == true then
    workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, Plr.Character[getgenv().Aimbot.AimPart].Position + Plr.Character[getgenv().Aimbot.AimPart].Velocity*getgenv().Aimbot.Predicting/10)
                            end

end)

if getgenv().Aimbot.AirshotFunc == true then
    
                if Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                    getgenv().Aimbot.AimPart = getgenv().Aimbot.AirshotPart
                else
                    Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(function(old,new)
                        if new == Enum.HumanoidStateType.Freefall then
                        getgenv().Aimbot.AimPart = getgenv().Aimbot.AirshotPart
                        else
                            getgenv().Aimbot.AimPart = getgenv().Aimbot.AimPart
                        end
                    end)
                end
            end

-- Main

local MainSection = win:Tab("Main")
MainSection:Toggle("Aimbot",false, function(t)
    getgenv().Aimbot.Enabled = t
end)
MainSection:Toggle("Silent Aim",false, function(t)
    DaHoodSettings.SilentAim = t
end)
MainSection:Toggle("FOV",false, function(t)
    Aiming.ShowFOV = t
end)
MainSection:Slider("FOV Size",0,300,8, function(t)
    Aiming.FOV = t
end)

local Settings = win:Tab("Settings")


Settings:Label("UI Toggle Key:  Right-Ctrl")
Settings:Label("GUI Made By Tofu")

Settings:Button("Copy Discord Invite", function()
    setclipboard("https://discord.gg/QQHYw8wtVW")
    UILib:Notification("Notification", "Copied!", "Okay")
end)
